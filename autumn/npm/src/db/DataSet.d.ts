import DataRow from './DataRow';
import DataSource, { IDataSource } from './DataSource';
import FieldDefs from './FieldDefs';
import SearchDataSet from './SearchDataSet';
export declare type DataSetProps = {
    state?: number;
    message?: string;
};
export default class DataSet implements IDataSource {
    private _recNo;
    private _fetchNo;
    private _state;
    private _message;
    private _fields;
    private _metaInfo;
    private _meta;
    private _head;
    private _records;
    private _garbage;
    private _search;
    private _crud;
    constructor(props?: DataSetProps);
    asDataSource(): DataSource;
    get search(): SearchDataSet;
    get current(): DataRow;
    append(): DataSet;
    edit(): DataSet;
    delete(): DataSet;
    first(): boolean;
    last(): boolean;
    prior(): boolean;
    next(): boolean;
    bof(): boolean;
    eof(): boolean;
    get size(): number;
    get recNo(): number;
    setRecNo(recNo: number): DataSet;
    fetch(): boolean;
    copyRecord(source: DataRow, fields?: FieldDefs): void;
    exists(field: string): boolean;
    get head(): DataRow;
    getHead(): DataRow;
    get records(): DataRow[];
    get fields(): FieldDefs;
    setValue(field: string, value: any): DataSet;
    getValue(field: string): object;
    getString(field: string): string;
    getDouble(field: string): number;
    getText(field: string): string;
    getBoolean(field: string): boolean;
    mergeChangeLog(): DataSet;
    clear(): void;
    close(): void;
    locate(fields: string, value: any): boolean;
    get json(): string;
    setJson(value: string): void;
    get jsonObject(): object;
    get state(): number;
    setState(state: number): DataSet;
    get message(): string;
    setMessage(message: string): DataSet;
    get metaInfo(): boolean;
    setMetaInfo(metaInfo: boolean): DataSet;
    get crud(): boolean;
    setCrud(value: boolean): DataSet;
    appendDataSet(source: DataSet): void;
    setSort(...fields: string[]): void;
    reverse(): void;
    forEach(fn: (row: DataRow) => void): void;
    getPromise(): Promise<DataSet>;
    locationRow(row: DataRow): number;
}
